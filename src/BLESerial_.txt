/*
    Video: https://www.youtube.com/watch?v=oCMOYS71NIU
    Based on Neil Kolban example for IDF: https://github.com/nkolban/esp32-snippets/blob/master/cpp_utils/tests/BLE%20Tests/SampleNotify.cpp
    Ported to Arduino ESP32 by Evandro Copercini

   Create a BLE server that, once we receive a connection, will send periodic notifications.
   The service advertises itself as: 6E400001-B5A3-F393-E0A9-E50E24DCCA9E
   Has a characteristic of: 6E400002-B5A3-F393-E0A9-E50E24DCCA9E - used for receiving data with "WRITE"
   Has a characteristic of: 6E400003-B5A3-F393-E0A9-E50E24DCCA9E - used to send data with  "NOTIFY"

   The design of creating the BLE server is:
   1. Create a BLE Server
   2. Create a BLE Service
   3. Create a BLE Characteristic on the Service
   4. Create a BLE Descriptor on the characteristic
   5. Start the service.
   6. Start advertising.
[E][BluetoothSerial.cpp:181] _spp_send_buffer(): SPP Write Congested!
   In this example rxValue is the data received (only accessible inside that function).
   And txValue is the data to be sent, in this example just a byte incremented every second.
*/
#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <string.h>
#include "relay.h"
#include "BLESerial.h"
#define HM10 // by saman

BLEServer *pServer = NULL;
BLECharacteristic *pTxCharacteristic;
bleData BLE_DATA;

// See the following for generating UUIDs:
// https://www.uuidgenerator.net/
#ifdef HM10
#define SERVICE_UUID "0000ffe0-0000-1000-8000-00805f9b34fb"             //"6E400001-B5A3-F393-E0A9-E50E24DCCA9E" // UART service UUID
#define CHARACTERISTIC_UUID_RXTX "0000ffe1-0000-1000-8000-00805f9b34fb" //"6E400002-B5A3-F393-E0A9-E50E24DCCA9E"
#endif
#ifndef HM10
#define SERVICE_UUID "6E400001-B5A3-F393-E0A9-E50E24DCCA9E" // UART service UUID
#define CHARACTERISTIC_UUID_RX "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"
#define CHARACTERISTIC_UUID_TX "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"
#endif

class MyServerCallbacks : public BLEServerCallbacks
{
    void onConnect(BLEServer *pServer)
    {

        BLE_DATA.deviceConnected = true;
    };

    void onDisconnect(BLEServer *pServer)
    {
        BLE_DATA.deviceConnected = false;
    }
};

class MyCallbacks : public BLECharacteristicCallbacks
{
    void onWrite(BLECharacteristic *pCharacteristic)
    {
        std::string strBLE = pCharacteristic->getValue();
        // Serial.print("BLE:");
        for (int i = 0; i < strBLE.length(); i++)
        {
            // Serial.print(strBLE[i]);          // print received data to terminal
            BLE_DATA.bleRxStr[i] = strBLE[i]; // fill data buffer
        }
        BLE_DATA.bleRxStr[strBLE.length() - 1] = '\0'; // delet the last buffer to avoid \n character
        BLE_DATA.RxDataReadyFlag = true;
    }
    void onNotify(BLECharacteristic *pCharacteristic)
    {
    }
};

void setupBLE()
{
    // Create the BLE Server
    BLEDevice::init("LabobinxSmart"); // Create the BLE Device

    pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyServerCallbacks());

    // Create the BLE Service
    BLEService *pService = pServer->createService(SERVICE_UUID);

    // Create a BLE Characteristic
    pTxCharacteristic = pService->createCharacteristic(
        CHARACTERISTIC_UUID_RXTX,
        BLECharacteristic::PROPERTY_WRITE); // PROPERTY_WRITE_NR cause write characteristics error in ios
    pTxCharacteristic->setIndicateProperty(true);
    pTxCharacteristic->setNotifyProperty(true);
    pTxCharacteristic->setReadProperty(true);
    pTxCharacteristic->addDescriptor(new BLE2902());
    pTxCharacteristic->setCallbacks(new MyCallbacks());

    // Start the service
    pService->start();

    // Start advertising
    pServer->getAdvertising()->start();
    Serial.println("\n\rBLE : Waiting a client connection to notify...");
}

void BLEsend(char *str)
{
    BLE_DATA.TxDataSent = false;
    if (BLE_DATA.deviceConnected)
    {
        // pTxCharacteristic->setValue(&txValue, 1);
        pTxCharacteristic->setValue(str);
        pTxCharacteristic->notify();
        BLE_DATA.txValue++;
        // delay(10); // bluetooth stack will go into congestion, if too many packets are sent
        vTaskDelay(15 / portTICK_PERIOD_MS);
    }
    BLE_DATA.TxDataSent = true;
}

void BLEloop()
{

    if (BLE_DATA.deviceConnected)
    {
        if (strlen(BLE_DATA.bleTxStr))
        {
            BLEsend(BLE_DATA.bleTxStr);
            /*clear string after sending*/
            BLE_DATA.bleTxStr[0] = '\0';
        }
    }

    // disconnecting
    if (!BLE_DATA.deviceConnected && BLE_DATA.oldDeviceConnected)
    {
        // delay(500);                  // give the bluetooth stack the chance to get things ready
        vTaskDelay(500 / portTICK_PERIOD_MS);
        pServer->startAdvertising(); // restart advertising
        Serial.println("start advertising");
        BLE_DATA.oldDeviceConnected = BLE_DATA.deviceConnected;
    }
    // connecting
    if (BLE_DATA.deviceConnected && !BLE_DATA.oldDeviceConnected)
    {
        // do stuff here on connecting
        BLE_DATA.oldDeviceConnected = BLE_DATA.deviceConnected;
    }
}